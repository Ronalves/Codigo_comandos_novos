  METHOD /bobf/if_frw_determination~execute.

*   Israel Balam/MGS Consulting.

*   is_ctx IMPORTING TYPE /bobf/s_frw_ctx_det
*   it_key IMPORTING TYPE /bobf/t_frw_key
*   io_read IMPORTING TYPE REF TO /bobf/if_frw_read
*   io_modify IMPORTING TYPE REF TO /bobf/if_frw_modify
*   eo_message EXPORTING  TYPE REF TO /bobf/if_frw_message
*   et_failed_key EXPORTING TYPE /bobf/t_frw_key

    TYPES: BEGIN OF ty_logloc,
             log_locid TYPE /scmtms/location_id,
           END OF ty_logloc.

    TYPES: BEGIN OF ty_itemtr,
             zztm_btype  TYPE ztme_btype,
             gro_wei_val TYPE /scmtms/qua_gro_wei_val,
             tures_tco   TYPE /scmtms/equip_type,
           END OF ty_itemtr.

    DATA: lo_change  TYPE REF TO /bobf/if_tra_change,
          lo_nodes   TYPE REF TO zcl_get_nodes_subnodes,
          lo_message TYPE REF TO /bobf/if_frw_message,
          lo_srvma   TYPE REF TO /bobf/if_tra_service_manager,
          lo_srvno   TYPE REF TO /bobf/if_tra_service_manager,
          lo_actio   TYPE REF TO /bobf/if_tra_service_manager,
          lo_srvzo   TYPE REF TO /bobf/if_tra_service_manager.

    FIELD-SYMBOLS: <fs_stops>  TYPE /scmtms/t_tor_stop_k,
                   <fs_stopl>  TYPE /scmtms/t_tor_stop_k,
                   <fs_trans>  TYPE /scmtms/t_tcc_root_k,
                   <fs_docref> TYPE /scmtms/t_tor_root_k,
                   <fs_locati> TYPE /scmtms/t_bo_tzn_loc_k,
                   <fs_itemtr> TYPE /scmtms/t_tor_item_tr_k.

    DATA: lt_tzndat TYPE /scmtms/t_bo_tzn_loc_k,           " /scmtms/t_tor_root_k,
          lt_locdat TYPE /scmtms/t_bo_tzn_loc_k.           " /scmtms/t_tor_root_k.

    DATA: lt_data       TYPE REF TO data,
          lt_key        TYPE /bobf/t_frw_key,
          lt_key2       TYPE /bobf/t_frw_key2,
          lt_key_root   TYPE /bobf/t_frw_key,
          lt_key_stop   TYPE /bobf/t_frw_key,
          lt_key_trans  TYPE /bobf/t_frw_key,
          lt_key_stopl  TYPE /bobf/t_frw_key,
          lt_key_itemtr TYPE /bobf/t_frw_key,
          lt_key_locati TYPE /bobf/t_frw_key.

    DATA: lt_root       TYPE /scmtms/t_tor_root_k,
          lt_failed_key TYPE /bobf/t_frw_key,
          lt_filter     TYPE /bobf/t_frw_query_selparam,
          lt_selpar     TYPE /bobf/t_frw_query_selparam.

    DATA: lt_logloc TYPE STANDARD TABLE OF ty_logloc,
          lt_itemtr TYPE STANDARD TABLE OF ty_itemtr.

    DATA: ls_query_inf TYPE /bobf/s_frw_query_info.

    DATA: key TYPE /bobf/conf_key.

    DATA: lv_check  TYPE boolean,
          lv_incomp TYPE boolean.

    DATA: lv_temp  TYPE c,
          lv_volva TYPE /scmtms/qua_gro_vol_val,
          lv_weiva TYPE /scmtms/qua_gro_wei_val,
          lv_capvo TYPE /scmtms/qua_gro_vol_val,
          lv_capwe TYPE /scmtms/qua_gro_wei_val,
          lv_godva TYPE /scmtms/amt_goodsvalue_val.

    CREATE OBJECT: lo_nodes.

*   Obtener indicador de incompatibilidad.
    GET PARAMETER ID 'MESSA' FIELD lv_incomp.

    io_read->retrieve( EXPORTING
                         iv_node = is_ctx-node_key
                         it_key = it_key
                         iv_fill_data = abap_true
                       IMPORTING
                         et_data = lt_root ).

    IF lines( lt_root ) GT 0.

      DATA(ls_root) = lt_root[ 1 ].

      SELECT tor_type
        INTO TABLE @DATA(lt_orden)
        FROM zttm_tp_ordem
       WHERE tor_type EQ @ls_root-tor_type.

clear lt_orden.

      IF lt_orden IS NOT INITIAL.

        IF lv_incomp EQ abap_false.

          CLEAR: lv_incomp.

*         DATA(io_srvmgr) = /bobf/cl_tra_serv_mgr_factory=>get_service_manager( iv_bo_key = /scmtms/if_tor_c=>sc_bo_key ).
*
*         APPEND VALUE #( attribute_name = /scmtms/if_tor_c=>sc_query_attribute-root-root_elements-tor_id
*                         option = 'EQ'
*                         sign = 'I'
*                         low = '00000000006100000020' ) TO lt_filter.
*
*         io_srvmgr->query( EXPORTING
*                             iv_query_key = /scmtms/if_tor_c=>sc_query-root-planning_attributes
*                             it_selection_parameters = lt_filter
*                           IMPORTING
*                             eo_message = lo_message
*                             es_query_info = ls_query_inf
*                             et_key = lt_key ).
*
*         INSERT lt_key[ 1 ]-key INTO TABLE lt_key2.

          INSERT it_key[ 1 ]-key INTO TABLE lt_key2.

          lo_nodes->get_root_nodes( EXPORTING
                                      gv_bo_key = /scmtms/if_tor_c=>sc_bo_key
                                      gt_key = lt_key2
                                      gv_node_key = /scmtms/if_tor_c=>sc_node-root
                                    IMPORTING
                                      gt_root_node_list = DATA(lt_rootn) ).

*         Assigned_Fus.
          TRY.
              DATA(ls_root_node) = lt_rootn[ caption = 'ASSIGNED_FUS' ].

              CREATE DATA lt_data TYPE (ls_root_node-data_table_type).
              ASSIGN lt_data->* TO <fs_docref>.
              lt_key_root =  VALUE #( ( key = ls_root_node-key ) ).

              lo_nodes->get_list_subnodes( EXPORTING
                                             gv_node_key = ls_root_node-node_key
                                             gt_key = lt_key_root
                                             gv_association = ls_root_node-association
                                             gv_bo_key = ls_root_node-bo_key
                                           IMPORTING
                                             gt_subnode_list = DATA(gt_subnode_list)
                                             et_data = <fs_docref> ).

              IF <fs_docref> IS ASSIGNED.

                DATA(lv_docrefl) = lines( <fs_docref> ).

                LOOP AT <fs_docref> INTO DATA(ls_docref).

                  DATA(lv_btype) = ls_docref-zztm_btype.

                  " Obtiene subnodos del segundo nivel ITEM_TR.
                  TRY.
                      DATA(ls_subnode) = gt_subnode_list[ caption = 'ITEM_TR' ].

                      CREATE DATA lt_data TYPE (ls_subnode-data_table_type).
                      ASSIGN lt_data->* TO <fs_itemtr>.
                      lt_key_itemtr = VALUE #( ( key = ls_docref-key ) ).

                      lo_nodes->get_list_subnodes( EXPORTING
                                                     gv_node_key = ls_subnode-node_key
                                                     gt_key = lt_key_itemtr
                                                     gv_association = ls_subnode-association
                                                     gv_bo_key = ls_subnode-bo_key
                                                   IMPORTING
                                                     gt_subnode_list = DATA(gt_subnode_list2)
                                                     et_data = <fs_itemtr> ).

                      TRY.
                          DATA(lv_tures_tco) = <fs_itemtr>[ item_cat = 'AVR' ]-tures_tco.
                        CATCH cx_sy_itab_line_not_found.
                      ENDTRY.

                      APPEND VALUE #( zztm_btype = ls_docref-zztm_btype
                                      gro_wei_val = REDUCE #( INIT x TYPE /scmtms/qua_gro_wei_val
                                                               FOR ls_item IN <fs_itemtr>
                                                              NEXT x = x + ls_item-gro_wei_val )
                                      tures_tco = lv_tures_tco
                                    ) TO lt_itemtr.

                      lv_volva = lv_volva + REDUCE #( INIT x TYPE /scmtms/qua_gro_vol_val
                                                       FOR ls_item IN <fs_itemtr>
                                                     WHERE ( item_cat EQ 'PRD' AND main_cargo_item EQ 'X' )
                                                      NEXT x = x + ls_item-gro_vol_val ).

                      lv_weiva = lv_weiva + REDUCE #( INIT y TYPE /scmtms/qua_gro_wei_val
                                                       FOR ls_item IN <fs_itemtr>
                                                     WHERE ( item_cat EQ 'PRD' AND main_cargo_item EQ 'X' )
                                                      NEXT y = y + ls_item-gro_wei_val ).

                      lv_godva = lv_godva + REDUCE #( INIT z TYPE /scmtms/amt_goodsvalue_val
                                                       FOR ls_item IN <fs_itemtr>
                                                     WHERE ( item_cat EQ 'PRD' AND main_cargo_item EQ 'X' )
                                                      NEXT z = z + ls_item-amt_gdsv_val ).

                      TRY.
                          DATA(ls_capva) = <fs_itemtr>[ item_cat = 'AVR' ].

                          lv_capvo = ls_capva-gro_vol_valcap.
                          lv_capwe = ls_capva-gro_wei_valcap.

                        CATCH cx_sy_itab_line_not_found.
                      ENDTRY.

                    CATCH cx_sy_itab_line_not_found.
                  ENDTRY.

                ENDLOOP.

                SORT lt_itemtr BY gro_wei_val DESCENDING.
                DATA(ls_itemtr) = lt_itemtr[ 1 ].

                SELECT SINGLE
                       porce
                  INTO @DATA(lv_minpo)
                  FROM zttm_porc_min
                 WHERE btype EQ @ls_itemtr-zztm_btype
                   AND itemc EQ @ls_itemtr-tures_tco.

                IF lv_minpo IS NOT INITIAL.

                  DATA(lv_volpo) = ( lv_volva * 100 ) / lv_capvo.
                  DATA(lv_weipo) = ( lv_weiva * 100 ) / lv_capwe.

                  IF lv_minpo GT lv_volpo OR lv_weipo GT lv_minpo.
                    lv_check = abap_true.
                  ENDIF.

                ENDIF.
              ENDIF.
            CATCH cx_sy_itab_line_not_found.
          ENDTRY.

          IF lv_check IS NOT INITIAL.

            lo_actio->do_action( EXPORTING
                                     iv_act_key = /scmtms/if_tor_c=>sc_action-root-calc_transportation_charges
                                     it_key = lt_key
*                                    is_parameters = Action Parameters if available & required
                                   IMPORTING
                                     eo_change = lo_change
                                     eo_message = lo_message
                                     et_failed_key = lt_failed_key ).

            TRY.
                DATA(ls_root_trans) = lt_rootn[ caption = 'TRANSPORTCHARGES' ].

                CREATE DATA lt_data TYPE (ls_root_trans-data_table_type).
                ASSIGN lt_data->* TO <fs_trans>.
                lt_key_trans =  VALUE #( ( key = ls_root_trans-key ) ).

                lo_nodes->get_list_subnodes( EXPORTING
                                               gv_node_key = ls_root_trans-node_key
                                               gt_key = lt_key_trans
                                               gv_association = ls_root_trans-association
                                               gv_bo_key = ls_root_trans-bo_key
                                             IMPORTING
                                               gt_subnode_list = DATA(gt_subnode_list_trans)
                                               et_data = <fs_trans> ).

                DATA(lv_amoun) = <fs_trans>[ 1 ]-net_amount.
                DATA(lv_amopo) = ( lv_godva * 100 ) / lv_amoun.

              CATCH cx_sy_itab_line_not_found.
            ENDTRY.

*           Stop.
            TRY.
                DATA(ls_root_stop) = lt_rootn[ caption = 'STOP' ].

                CREATE DATA lt_data TYPE (ls_root_stop-data_table_type).
                ASSIGN lt_data->* TO <fs_stops>.
                lt_key_stop =  VALUE #( ( key = ls_root_stop-key ) ).

                lo_nodes->get_list_subnodes( EXPORTING
                                               gv_node_key = ls_root_stop-node_key
                                               gt_key = lt_key_stop
                                               gv_association = ls_root_stop-association
                                               gv_bo_key = ls_root_stop-bo_key
                                             IMPORTING
                                               gt_subnode_list = DATA(gt_subnode_list_stop)
                                               et_data = <fs_stops> ).

*               DATA(lt_logloc) = VALUE ty_logloc( FOR ls_stops
*                                                  IN <fs_stops>
*                                                  WHERE ( stop_seq_pos NE 'F' ) ( ls_stops-log_locid ) ).

                LOOP AT <fs_stops> INTO DATA(ls_stops) WHERE stop_seq_pos NE 'F'.
                  APPEND VALUE #( log_locid = ls_stops-log_locid ) TO lt_logloc.
                ENDLOOP.

*               Location.
                SELECT locid,
                       locno,
                       loc_uuid,
                       adrnummer
                  INTO TABLE @DATA(lt_location)
                  FROM /sapapo/loc
                   FOR ALL ENTRIES IN @lt_logloc
                 WHERE locno EQ @lt_logloc-log_locid.

                IF lt_location IS NOT INITIAL.

*                 Buscar por código postal.
                  SELECT post_code1
                    INTO TABLE @DATA(lt_addrc)
                    FROM adrc
                     FOR ALL ENTRIES IN @lt_location
                   WHERE addrnumber EQ @lt_location-adrnummer.

                  IF lt_addrc IS NOT INITIAL.

*                   Get instances of TZN via Query.
                    lo_srvma = /bobf/cl_tra_serv_mgr_factory=>get_service_manager( /scmtms/if_tzn_c=>sc_bo_key ).

                    LOOP AT lt_addrc INTO DATA(ls_addrc).

                      APPEND VALUE #(
                                      sign = 'I'
                                      option = 'EQ'
                                      low = ls_addrc-post_code1
                                      attribute_name = /scmtms/if_tzn_c=>sc_query_attribute-root-querybyphysicaladdress-lowerboundarypostalcode
                                    ) TO lt_selpar.

                    ENDLOOP.

*                   Execute the query.
                    lo_srvma->query( EXPORTING
                                       iv_query_key = /scmtms/if_tzn_c=>sc_query-root-querybyphysicaladdress  " Query
                                       it_selection_parameters = lt_selpar                                    " Query Selection Parameters
                                       iv_fill_data = abap_true
                                     IMPORTING
                                       eo_message = lo_message                                                " Message Object
                                       es_query_info = ls_query_inf                                           " Query Information
                                       et_data = lt_tzndat
                                       et_key = lt_key ).

                    INSERT lt_key[ 1 ]-key INTO TABLE lt_key2.

                    lo_nodes->get_root_nodes( EXPORTING
                                                gv_bo_key = /scmtms/if_tor_c=>sc_bo_key
                                                gt_key = lt_key2
                                                gv_node_key = /scmtms/if_tor_c=>sc_node-root
                                              IMPORTING
                                                gt_root_node_list = DATA(lt_rootz) ).

                    TRY.
                        DATA(ls_root_loca) = lt_rootz[ caption = 'LOCATION' ].

                        CREATE DATA lt_data TYPE (ls_root_loca-data_table_type).
                        ASSIGN lt_data->* TO <fs_locati>.
                        lt_key_locati =  VALUE #( ( key = ls_root_loca-key ) ).

                        lo_nodes->get_list_subnodes( EXPORTING
                                                       gv_node_key = ls_root_loca-node_key
                                                       gt_key = lt_key_stop
                                                       gv_association = ls_root_loca-association
                                                       gv_bo_key = ls_root_loca-bo_key
                                                     IMPORTING
                                                       gt_subnode_list = DATA(gt_subnode_list_loca)
                                                       et_data = <fs_locati> ).

*                        LOOP AT lt_tzndat INTO DATA(ls_tzndat).
                        LOOP AT lt_location INTO DATA(ls_location).

                          DATA(lv_tabix) = sy-tabix.

*                          TRY.
                          DATA(ls_locati) = <fs_locati>[ locationid = ls_location-locid ].

                          SELECT SINGLE
                                 exclude
                            INTO @DATA(lv_exclu)
                            FROM /scmb/zone_d
                           WHERE guid_zone = @ls_location-loc_uuid      " @ls_tzndat-key
                             AND guid_location = @ls_locati-uuid004.

                          IF lv_exclu IS NOT INITIAL.
                            DELETE lt_tzndat INDEX lv_tabix.
                            CLEAR: lv_exclu.
                          ENDIF.

*                            CATCH cx_sy_itab_line_not_found.
*                          ENDTRY.

                        ENDLOOP.
                      CATCH cx_sy_itab_line_not_found.
                    ENDTRY.

                  ENDIF.

*                 Get instances of TZN via Query.
                  lo_srvzo = /bobf/cl_tra_serv_mgr_factory=>get_service_manager( /scmtms/if_tzn_c=>sc_bo_key ).

                  LOOP AT lt_location INTO DATA(ls_locatio).

                    APPEND VALUE #(
                                    sign = 'I'
                                    option = 'EQ'
                                    low = ls_location-locno
                                    attribute_name = /scmtms/if_tzn_c=>sc_query_attribute-root-querybylocation-locationid
                                  ) TO lt_selpar.

                  ENDLOOP.

*                 Execute the query.
                  lo_srvma->query( EXPORTING
                                     iv_query_key = /scmtms/if_tzn_c=>sc_query-root-querybylocation   " Query
                                     it_selection_parameters = lt_selpar                              " Query Selection Parameters
                                     iv_fill_data = abap_true
                                   IMPORTING
                                     eo_message = lo_message                                          " Message Object
                                     es_query_info = ls_query_inf                                     " Query Information
                                     et_data = lt_locdat
                                     et_key = lt_key ).

                  LOOP AT lt_locdat INTO DATA(ls_locdat).

                    DATA(lv_tabin) = sy-tabix.

                    SELECT SINGLE
                           exclude
                      FROM /scmb/zone_d
                     WHERE guid_zone IS INITIAL
                       AND guid_location IS INITIAL
                      INTO @DATA(lv_supri).

                    IF lv_supri EQ abap_true.
                      DELETE lt_locdat INDEX lv_tabin.
                    ENDIF.
                  ENDLOOP.

                ENDIF.

                TYPES: BEGIN OF ty_zones,
                         norow TYPE int4,
                         idzon TYPE /scmb/de_zone_id,
                       END OF ty_zones.

                DATA: lt_zones TYPE STANDARD TABLE OF ty_zones.

                LOOP AT lt_tzndat INTO DATA(ls_tzntem).
                  APPEND VALUE #( norow = REDUCE i( INIT a = 0 FOR ls IN lt_tzndat WHERE ( locationid = ls_tzntem-locationid ) NEXT a = a + 1 )
                                  idzon = ls_tzntem-locationid ) TO lt_zones.
                ENDLOOP.

                LOOP AT lt_locdat INTO DATA(ls_loctem).
                  APPEND VALUE #( norow = REDUCE i( INIT b = 0 FOR ls IN lt_locdat WHERE ( locationid = ls_loctem-locationid ) NEXT b = b + 1 )
                                  idzon = ls_loctem-locationid ) TO lt_zones.
                ENDLOOP.

                SORT lt_zones BY idzon.
                DELETE ADJACENT DUPLICATES FROM lt_zones COMPARING idzon.

                SELECT idzon
                  INTO TABLE @DATA(lt_zonpr)
                  FROM zttm_zonpr
                   FOR ALL ENTRIES IN @lt_zones
                 WHERE idzon EQ @lt_zones-idzon.

                IF lt_zonpr IS NOT INITIAL.

                  LOOP AT lt_zones INTO DATA(ls_zones).

                    DATA(lv_index) = sy-tabix.

                    TRY.
                        DATA(ls_zonpr) = lt_zonpr[ idzon = ls_zones-idzon ].
                        DELETE lt_zones INDEX lv_index.
                      CATCH cx_sy_itab_line_not_found.
                    ENDTRY.

                  ENDLOOP.

*                 Zona de transporte para realizar la búsqueda.
                  DATA(lv_zones) = CONV /scmb/de_zone_id( lt_zones[ 1 ]-idzon ).

                  SELECT SINGLE
                         porce
                    INTO @DATA(lv_maxpo)
                    FROM zttm_porc_max
                   WHERE btype EQ @ls_itemtr-zztm_btype
                     AND idzon EQ @lv_zones.

                  IF lv_maxpo IS NOT INITIAL.

                    IF lv_amopo GT lv_maxpo.

                      MESSAGE e001(ztm) WITH |Flete/Venta excedida, reprogramar.| INTO lv_temp.

                    ELSE.

                      LOOP AT <fs_docref> INTO DATA(ls_doctem).

                        TRY.
                            DATA(ls_subnode_last) = gt_subnode_list[ caption = 'STOP_LAST' ].

                            CREATE DATA lt_data TYPE (ls_subnode_last-data_table_type).
                            ASSIGN lt_data->* TO <fs_stopl>.
                            lt_key_stopl = VALUE #( ( key = ls_doctem-key ) ).

                            lo_nodes->get_list_subnodes( EXPORTING
                                                           gv_node_key = ls_subnode_last-node_key
                                                           gt_key = lt_key_itemtr
                                                           gv_association = ls_subnode_last-association
                                                           gv_bo_key = ls_subnode_last-bo_key
                                                         IMPORTING
                                                           gt_subnode_list = DATA(gt_subnode_list3)
                                                           et_data = <fs_stopl> ).

                            DATA(ls_stopl) = <fs_stopl>[ 1 ].

                            DATA: lv_fecha TYPE /scmtms/stop_acc_end.

                            IF ls_stopl-acc_end IS NOT INITIAL.
                              lv_fecha = ls_stopl-acc_end.
                            ELSEIF ls_stopl-req_end IS NOT INITIAL.
                              lv_fecha = ls_stopl-req_end.
                            ENDIF.

                            IF 0 EQ 0.
                              MESSAGE e001(ztm) WITH |Flete/Venta no superada, hay demandas que esperan al siguiente día hábil.| INTO lv_temp.
                            ENDIF.

                          CATCH cx_sy_itab_line_not_found.
                        ENDTRY.

                      ENDLOOP.
                    ENDIF.
                  ELSE.
                    MESSAGE e001(ztm) WITH |Porcentaje máximo no encontrado.| INTO lv_temp.
                  ENDIF.

                  CALL METHOD /scmtms/cl_common_helper=>msg_helper_add_symsg
                    EXPORTING
                      iv_key      = /scmtms/if_tor_c=>sc_bo_key               " Instance Key
                      iv_node_key = /scmtms/if_tor_c=>sc_node-root       " BO Key
                    CHANGING
                      co_message  = eo_message.

                ENDIF.
              CATCH cx_sy_itab_line_not_found.
            ENDTRY.
          ENDIF.
        ELSE.
          SET PARAMETER ID 'MESSA' FIELD lv_incomp.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDMETHOD.
